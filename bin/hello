#!/usr/local/bin/node

(function() {
  'use strict';

  var fs = require('fs');
  var path = require('path');
  var exec = require('child_process').exec;
  var async = require('async');
  var gaze = require('gaze');

  var commandName = process.argv[1].split('/').pop();
  var configFilename = '.helloworldr';

  // Timeout in seconds
  var timeoutDelay = 60;

  function _displayHelp() {
    console.log('Usage: '+commandName+' {config}');
  }

  function _fatalError(err) {
    console.error(err);
    process.exit(1);
  }

  var i = 1;
  function _iteration() {
    return i++;
  }

  // Too many parameters
  if(process.argv.length > 3) {
    _displayHelp();
    process.exit(1);

  // Use different configuration file
  } else if(process.argv.length === 3) {
    configFilename = process.argv[2];

  // Request help
  } else if(process.argv.indexOf('-h') !== -1) {
    _displayHelp();
    process.exit();
  }

  var config = {};
  async.series([

    // Load config
    function(next) {
      fs.readFile(process.cwd() + path.sep + configFilename, function(err, data) {
        try {
          next(err, config = JSON.parse(data));

        } catch(err) {
          next(err);
        }
      });
    }

  ], function(err) {
    if(err) {
      return _fatalError(err);
    }

    timeoutDelay = config.timeout || timeoutDelay;

    // Each entry
    var actionItems = config.watch || {};
    console.log('\x1b[34mWatching.\x1b[0m');
    Object.keys(actionItems).forEach(function(pattern, i) {
      var cmd = actionItems[pattern];
      
      /**
       * Process a file
       */
      function _act(file) {
        var activity = cmd.replace(/%[0-9]/, file);

        console.log('\x1b[34mRunning ['+_iteration()+']:', activity.replace(process.cwd()+path.sep, ''), '\x1b[0m');
        var child = exec(activity);

        // Timeout
        var timerInterval = setTimeout(function() {
          child.kill('SIGHUP');
        }, timeoutDelay);

        child.stdout.on('data', function(data) {
          process.stdout.write(data);
        });
        child.stderr.on('data', function(data) {
          process.stderr.write(data);
        });

        // Complete
        child.on('close', function() {
          clearTimeout(timerInterval);
          console.log('\x1b[34mComplete.\x1b[0m');
        });
      }

      /**
       * Watch file pattern
       */
      gaze(pattern, function(err, watcher) {
        if(err) return _fatalError(err);

        this.on('added', function(filepath) {
          _act(filepath);
        });

        this.on('changed', function(filepath) {
          _act(filepath);
        });
      });
    });

  });

})();
